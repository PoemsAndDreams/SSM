<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

        <!--
        @Component：将类标识为普通组件
        @Controller：将类标识为控制层组件
        @Service：将类标识为业务层组件
        @Repository：将类标识为持久层组件
        -->

    <!--
        context:exclude-filter：排除扫描
        type：设置排除扫描的方式
        type="annotation|assignable"
        annotation：根据注解的类型进行排除，expression需要设置排除的注解的全类名
        assignable：根据类的类型进行排除，expression需要设置排除的类的全类名

        context:include-filter：包含扫描
        注意：需要在context:component-scan标签中设置use-default-filters="false"
        use-default-filters="true"（默认），所设置的包下所有的类都需要扫描，此时可以使用排除扫描
        use-default-filters="false"，所设置的包下所有的类都不需要扫描，此时可以使用包含扫描


     * 通过注解+扫描所配置的bean的id，默认值为类的小驼峰，即类名的首字母为小写的结果
     调用ioc的getBeanDefinitionNames()方法，打印返回的String数组也能够看到bean的id
     * 可以通过标识组件的注解的value属性值设置bean的自定义的id 如:@Controller("controller")
     *
     * @Autowired:实现自动装配功能的注解
     * 1、@Autowired注解能够标识的位置
     * a>标识在成员变量上，此时不需要设置成员变量的set方法
     * b>标识在set方法上
     * c>标识在为当前成员变量赋值的有参构造上
     * 2、@Autowired注解的原理
     * a>默认通过byType的方式，在IOC容器中通过类型匹配某个bean为属性赋值
     * b>若有多个类型匹配的bean，此时会自动转换为byName的方式实现自动装配的效果
     * 即将要赋值的属性的属性名作为bean的id匹配某个bean为属性赋值
     * c>若byType和byName的方式都无妨实现自动装配，即IOC容器中有多个类型匹配的bean
     * 且这些bean的id和要赋值的属性的属性名都不一致，此时抛异常：NoUniqueBeanDefinitionException
     * d>此时可以在要赋值的属性上，添加一个注解@Qualifier   @Qualifier("userServiceImpl")
     * 通过该注解的value属性值，指定某个bean的id，将这个bean为属性赋值
     *
     * 注意：若IOC容器中没有任何一个类型匹配的bean，此时抛出异常：NoSuchBeanDefinitionException
     * 在@Autowired注解中有个属性required，默认值为true，要求必须完成自动装配 @Autowired(required = false)
     * 可以将required设置为false，此时能装配则装配，无法装配则使用属性的默认值


    -->




<!--    <context:component-scan base-package="com.yutian.spring">-->
<!--&lt;!&ndash;        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>&ndash;&gt;-->
<!--        <context:exclude-filter type="assignable" expression="com.yutian.spring.controller.UserController"/>-->
<!--    </context:component-scan>-->

    <context:component-scan base-package="com.yutian.spring"></context:component-scan>

<!--    <bean id="service" class="com.yutian.spring.service.impl.UserServiceImpl"></bean>-->

<!--    <bean id="dao" class="com.yutian.spring.dao.impl.UserDaoImpl"></bean>-->

</beans>