<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
     * Date:2022/7/4
     * Author:ybc
     * Description:
     * 1、在切面中，需要通过指定的注解将方法标识为通知方法
     * @Before：前置通知，在目标对象方法执行之前执行
     * @After：后置通知，在目标对象方法的finally字句中执行
     * @AfterReturning：返回通知，在目标对象方法返回值之后执行
     * @AfterThrowing：异常通知，在目标对象方法的catch字句中执行
     *
     *
     * 2、切入点表达式：设置在标识通知的注解的value属性中
     * execution(public int com.atguigu.spring.aop.annotation.CalculatorImpl.add(int, int)
     * execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..)
     * 第一个*表示任意的访问修饰符和返回值类型
     * 第二个*表示类中任意的方法
     * ..表示任意的参数列表
     * 类的地方也可以使用*，表示包下所有的类
     * 3、重用切入点表达式
     * //@Pointcut声明一个公共的切入点表达式
     * @Pointcut("execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..))")
     * public void pointCut(){}
     * 使用方式：@Before("pointCut()")
     *
     * 4、获取连接点的信息
     * 在通知方法的参数位置，设置JoinPoint类型的参数，就可以获取连接点所对应方法的信息
     * //获取连接点所对应方法的签名信息
     * Signature signature = joinPoint.getSignature();
     * //获取连接点所对应方法的参数
     * Object[] args = joinPoint.getArgs();
     *
     * 5、切面的优先级
     * 可以通过@Order注解的value属性设置优先级，默认值Integer的最大值
     * @Order注解的value属性值越小，优先级越高
     *

    -->

    <!--
        AOP的注意事项：
        切面类和目标类都需要交给IOC容器管理
        切面类必须通过@Aspect注解标识为一个切面
        在Spring的配置文件中设置<aop:aspectj-autoproxy />开启基于注解的AOP
    -->

    <context:component-scan base-package="com.yutian.spring.aop.annotation"></context:component-scan>

    <!--开启基于注解的AOP-->
    <aop:aspectj-autoproxy/>

</beans>